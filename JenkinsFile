pipeline {
    agent {
        docker {
            image 'kuroko24/jenkins-slave:v7'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }
    stages {
        stage('Build and Test') {
            steps {
                // Run in bash and with debugging enabled
                sh '''#!/bin/bash
                set -x  # Enable debug mode
                ls -ltr && pwd
                # Build the project and create a JAR file
                mvn clean package || { echo "Build failed"; exit 1; }
                '''
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://44.204.156.236:9000/"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''#!/bin/bash
                    set -x  # Enable debug mode
                    mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL} || { echo "Sonar analysis failed"; exit 1; }
                    '''
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "kavi021994/ultimate-demo:${BUILD_NUMBER}"
            }
            steps {
                script {
                    sh '''#!/bin/bash
                    set -x  # Enable debug mode
                    docker build -t ${DOCKER_IMAGE} . || { echo "Docker build failed"; exit 1; }
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                    '''
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Project-jenkins"
                GIT_USER_NAME = "KavitaPant"
            }
            steps {
                dir('spring-manifest') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''#!/bin/bash
                        set -x  # Enable debug mode
                        git config --global user.email "kavitapant19464@gmail.com"
                        git config --global user.name "KavitaPant" 
                        git config --global --add safe.directory /var/lib/jenkins/workspace/ultimate-demo
                        rm -rf ../spring-manifest@tmp/ ../target/ || { echo "Cleanup failed"; exit 1; }
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml || { echo "Update deployment file failed"; exit 1; }
                        chmod 644 deployment.yml
                        git add -A
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}" || { echo "Git commit failed"; exit 1; }
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main || { echo "Git push failed"; exit 1; }
                        '''
                    }
                }
            }
        }
    }
}

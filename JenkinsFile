pipeline {
  agent {
    docker {
      image 'kuroko24/jenkins-slave:v7'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Build and Test') {
      steps {
        sh 'ls -ltr && pwd'
        // build the project and create a JAR file
        sh 'mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.87.222.165:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
              mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "kavi021994/ultimate-demo:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh 'docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Project-jenkins"
        GIT_USER_NAME = "KavitaPant"
      }
      steps {
        dir('spring-manifest') {
          withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
            sh '''
              git config --global user.email "kavitapant19464@gmail.com"
              git config --global user.name "KavitaPant"
              git config --global --add safe.directory /var/lib/jenkins/workspace/ultimate-demo
              chmod 644 deployment.yml
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
            '''
          }
        }
      }
    }
  }
}
